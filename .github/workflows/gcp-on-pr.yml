name: Deploy to Staging environment.
on:
  pull_request:
    branches:
      - master

env:
  REGION: "us-central1"
  FRONTEND_IMAGE: "us-central1-docker.pkg.dev/pagoda-data-stack-dev/cloud-run-source-deploy/queryapi-frontend"
  PR_NUMBER: ${{ github.event.number }}

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: "Checkout QueryApi"

      - name: Login to Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.CI_QUERY_API_UI_SA_DEV_KEY }}

      - name: Build Docker image and push to Google Artifact Registry
        id: docker-push-tagged
        uses: docker/build-push-action@v4
        with:
          push: true
          file: ./frontend/Dockerfile
          tags: "${{ env.FRONTEND_IMAGE }}:${{ env.PR_NUMBER }},${{ env.FRONTEND_IMAGE }}:${{ github.run_attempt }}-${{ github.sha }}"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    environment:
      name: dev-frontend
      url: ${{ steps.gcp_url.outputs.deploy_url }}
    steps:
      - uses: actions/checkout@v3
        name: "Checkout Query Api"

      - name: "Authenticate to GCloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.CI_Query_API_UI_SA_DEV_KEY }}"

      - name: "Deploy the Frontend"
        run: |
          gcloud run deploy queryapi-frontend --image="${{ env.FRONTEND_IMAGE }}:${{ env.PR_NUMBER }}" --region=${{ env.REGION }}\
            --tag="pr-${{ env.PR_NUMBER }}"\
            --update-env-vars "BRANCH=$GITHUB_REF_NAME"\
            --update-env-vars "COMMIT_SHA=$GITHUB_SHA"\
            --update-env-vars "GCP=true"\
      - name: "Get deployment URL"
        id: "gcp_url"
        run: |
          url=$(gcloud run services describe "queryapi-frontend" --platform managed --region "${{ env.REGION }}" --project "pagoda-data-stack-dev"\
           --format 'value(status.url)')
          match="https://"
          tagged_url="https://${url%%${match}*}pr-${{ env.PR_NUMBER }}---${url##*${match}}"
          echo deploy_url=$tagged_url >> $GITHUB_OUTPUT
